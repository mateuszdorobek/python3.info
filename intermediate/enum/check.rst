Enum Check
==========

*EnumCheck* contains the options used by the :func:`verify` decorator to ensure
various constraints; failed constraints result in a :exc:`ValueError`.


UNIQUE
------
Ensure that each value has only one name:

>>> from enum import Enum, verify, UNIQUE
>>>
>>> @verify(UNIQUE)
... class Color(Enum):
...     RED = 1
...     GREEN = 2
...     BLUE = 3
...     CRIMSON = 1
Traceback (most recent call last):
ValueError: aliases found in <enum 'Color'>: CRIMSON -> RED


CONTINUOUS
----------
*Designed to work with integer-valued members

Ensure that there are no missing values between the lowest-valued member
and the highest-valued member:

>>> from enum import Enum, verify, CONTINUOUS
>>>
>>> @verify(CONTINUOUS)
... class Color(Enum):
...     RED = 1
...     GREEN = 2
...     BLUE = 5
Traceback (most recent call last):
ValueError: invalid enum 'Color': missing values 3, 4


NAMED_FLAGS
-----------
*Designed to work with integer-valued members

Ensure that any flag groups/masks contain only named flags -- useful when
values are specified instead of being generated by :func:`auto`

>>> from enum import Flag, verify, NAMED_FLAGS
>>> @verify(NAMED_FLAGS)
... class Color(Flag):
...     RED = 1
...     GREEN = 2
...     BLUE = 4
...     WHITE = 15
...     NEON = 31
Traceback (most recent call last):
ValueError: invalid Flag 'Color': aliases WHITE and NEON are missing combined values of 0x18 [use enum.show_flag_values(value) for details]
